{"version":3,"sources":["meteor://ðŸ’»app/server/methods.js"],"names":[],"mappings":"yfile":"/server/methods.js","sourcesContent":["// ---------------------------------------\n// Meteor Methods\n// ---------------------------------------\n\nMeteor.methods({\n  createTicket: createTicket,\n  claimTicket: claimTicket,\n  completeTicket: completeTicket,\n  cancelTicket: cancelTicket,\n  deleteTicket: deleteTicket,\n  reopenTicket: reopenTicket,\n  rateTicket: rateTicket,\n  expireTicket: expireTicket,\n\n  createAnnouncement: createAnnouncement,\n  deleteAnnouncement: deleteAnnouncement,\n\n  toggleRole: toggleRole,\n  updateUser: updateUser,\n  createAccount: createAccount,\n\n  setSetting : setSetting\n});\n\nfunction createTicket(topic, location, contact) {\n  // Must be logged in and queue must be open\n  if (authorized.user(this.userId) && _settings().queueEnabled) {\n    // User can't have more than one\n    var userActiveTickets = Tickets.find(\n        {\n          userId: this.userId,\n          status: {\n            $in: [\"OPEN\", \"CLAIMED\"]\n          }\n        }).fetch();\n\n    // You can't have more than one active ticket!\n    if (userActiveTickets.length > 0) return;\n\n    var user = _getUser(this.userId);\n\n    Tickets.insert({\n      userId: user._id,\n      name: _getUserName(user),\n      topic: topic,\n      location: location,\n      contact: contact,\n      timestamp: Date.now(),\n      status: \"OPEN\",\n      expiresAt: _settings().expirationDelay > 0 ? Date.now() + _settings().expirationDelay : Infinity,\n      rating: null\n    });\n\n    _log(\"Ticket Created by \" + this.userId);\n  }\n}\n\nfunction claimTicket(id){\n\n  // You can't complete your own ticket!\n  var ticket = Tickets.findOne({_id: id});\n  if (ticket.userId == this.userId) return;\n\n  // Mentor Only\n  if (authorized.mentor(this.userId)){\n    var user = _getUser(this.userId);\n    // Mentors can only claim one ticket at a time.\n    var currentClaim = Tickets.find({\n      status: \"CLAIMED\",\n      claimId: this.userId\n    }).fetch();\n\n    if (currentClaim.length === 0){\n      Tickets.update({\n        _id: id\n      },{\n        $set: {\n          status: \"CLAIMED\",\n          claimId: user._id,\n          claimName: _getUserName(user),\n          claimTime: Date.now()\n        }\n      });\n\n      _log(\"Ticket Claimed by \" + this.userId);\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction completeTicket(id){\n  // You can't complete your own ticket!\n  var ticket = Tickets.findOne({_id: id});\n  if (ticket.userId == this.userId) return;\n\n  // Mentor only\n  if (authorized.mentor(this.userId)){\n    var user = _getUser(this.userId);\n    Tickets.update({\n      _id: id\n    },{\n      $set: {\n        status: \"COMPLETE\",\n        claimId: user._id,\n        claimName: _getUserName(user),\n        completeTime: Date.now()\n      }\n    });\n\n    _log(\"Ticket Completed by \" + this.userId);\n    return true;\n  }\n  return false;\n}\n\nfunction reopenTicket(id){\n  // Mentor only\n  if (authorized.mentor(this.userId)){\n    Tickets.update({\n      _id: id\n    },{\n      $set: {\n        status: 'OPEN',\n        expiresAt: _settings().expirationDelay > 0 ? Date.now() + _settings().expirationDelay : Infinity,\n        claimId: null,\n        claimName: null\n      }\n    });\n    _log(\"Ticket Reopened: \" + id);\n    return true;\n  }\n  return false;\n}\n\nfunction rateTicket(id, rating, comments){\n  // Ticket owner only\n  var ticket = Tickets.findOne({_id: id});\n\n  // Limit rating between 1 and 5\n  var score = Math.max(Math.min(rating, 5), 1);\n\n  if(ticket.userId === this.userId){\n    Tickets.update({\n      _id: id\n    }, {\n      $set: {\n        rating: score,\n        comments: comments\n      }\n    });\n    _log(\"Ticket \" + id + \", Rating: \" + rating);\n    return true;\n  }\n  return false;\n}\n\nfunction cancelTicket(id){\n\n  // Ticket owner or mentor\n  var ticket = Tickets.findOne({_id: id});\n\n  if (authorized.mentor(this.userId) || ticket.userId === this.userId){\n    Tickets.update({\n      _id: id\n    },{\n      $set: {\n        status: \"CANCELLED\"\n      }\n    });\n    _log(\"Ticket Cancelled by \" + this.userId);\n    return true;\n  }\n}\n\nfunction deleteTicket(id){\n  // Admin only\n  if (authorized.admin(this.userId)){\n    Tickets.remove({\n      _id: id\n    });\n    _log(\"Ticket Deleted by \" + this.userId);\n  }\n}\n\nfunction expireTicket(id){\n  var ticket = Tickets.findOne({_id: id, status: 'OPEN'});\n\n  if (ticket && ticket.userId == this.userId && ticket.expiresAt < Date.now()){\n    Tickets.update({\n      _id: id\n    }, {\n      $set: {\n        status: \"EXPIRED\"\n      }\n    });\n    _log(\"Ticket Expired \" + this.userId);\n  }\n}\n\nfunction createAnnouncement(header, content, type){\n  if (authorized.admin(this.userId)){\n    var user = _getUser(this.userId);\n    Announcements.insert({\n      userId: user._id,\n      name: _getUserName(user),\n      timestamp: Date.now(),\n      header: header,\n      content: content,\n      type: type\n    });\n    _log(\"Announcement created by \" + this.userId);\n    return true;\n  }\n  return false\n}\n\nfunction deleteAnnouncement(id){\n  if (authorized.admin(this.userId)){\n    Announcements.remove({\n      _id: id\n    });\n    _log(\"Announcement deleted by \" + this.userId);\n    return true;\n  }\n  return false;\n}\n\nfunction toggleRole(role, id){\n  if (authorized.admin(this.userId)){\n    // can only toggle available roles\n    var roles = [\"admin\", \"mentor\"];\n    if (roles.indexOf(role) < 0) return;\n\n    var user = _getUser(id);\n    var setRole = {};\n    setRole['profile.' + role] = !user.profile[role];\n\n    Meteor.users.update({\n      _id: id\n    },{\n      $set: setRole\n    });\n    return true;\n  }\n}\n\n// Admin or user\n// Editable fields:\n// Name, Email. Phone, Skills, Company\nfunction updateUser(id, profile){\n  var user = _getUser(id);\n\n  if (authorized.admin(this.userId) || user._id === this.userId){\n    var validFields = [\n      'name',\n      'email',\n      'phone',\n      'company'\n    ];\n\n    // Copy the user profile\n    var userProfile = user.profile;\n\n    // Pick valid fields from the submitted changes\n    validFields.forEach(function(field){\n      if (_.isString(profile[field])){\n        userProfile[field] = profile[field];\n      }\n    });\n\n    if(_.isArray(profile['skills'])){\n      userProfile['skills'] = profile['skills'];\n    }\n\n    Meteor.users.update({\n      _id: id\n    },{\n      $set: {\n        profile: userProfile\n      }\n    }, function(err){\n      return err;\n    });\n  }\n}\n\n// Only admin can create user accounts\nfunction createAccount(username, password, profile){\n  // TODO: validate username, password\n  check(username, String);\n  check(password, String);\n\n  if (authorized.admin(this.userId)){\n    return Accounts.createUser({\n      username: username,\n      password: password,\n      profile: profile ? profile : {}\n    });\n  }\n  return false;\n}\n\nfunction setSetting(setting, value){\n  if (authorized.admin(this.userId)){\n    var toSet = {};\n    toSet[setting] = value;\n    Settings.update({}, {$set: toSet});\n  }\n}"]}