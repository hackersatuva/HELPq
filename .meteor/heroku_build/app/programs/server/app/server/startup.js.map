{"version":3,"sources":["meteor://ðŸ’»app/server/startup.js"],"names":[],"mappings":"yfile":"/server/startup.js","sourcesContent":["// Startup Functions\nMeteor.startup(function(){\n  // Grab the config\n  var config = {};\n  var configJson;\n  try {\n    configJson = Assets.getText('config.json');\n  } catch (err) {\n    // file doesn't exist, but that's okay\n  }\n  if (configJson) {\n    config = JSON.parse(configJson);\n  }\n\n  // environment variables override config file\n  var configTemplate = JSON.parse(Assets.getText('config.json.template'));\n  var envConfigs = readConfigsFromEnv(configTemplate);\n  overlay(config, envConfigs);\n\n  // Create the admin\n  createAdmin(config.admin.username, config.admin.password);\n\n  // Clear Service integrations\n  ServiceConfiguration.configurations.remove({});\n\n  // Add Service Integrations\n  addServiceIntegration('github', config.github);\n  addFacebookIntegration(config.facebook);\n  addServiceIntegration('google', config.google);\n\n  // Add Base Settings\n  setBasicSettings(config);\n\n  Accounts.onCreateUser(function(options, user){\n    if (options.profile){\n      user.profile = options.profile;\n\n      if (config.defaultMentor){\n        user.profile.mentor = true;\n      }\n    }\n\n    return user;\n  });\n\n});\n\nfunction createAdmin(username, password){\n  var user = Meteor.users.findOne({\n    username: username\n  });\n\n  if (!user){\n    user = Accounts.createUser({\n      username: username,\n      password: password,\n      profile: {\n        name: 'Admin'\n      }\n    });\n  }\n\n  Accounts.setPassword(user, password);\n\n  Meteor.users.update({\n    username: username\n  },{\n    $set:\n      {\n        'profile.admin': true\n      }\n  })\n}\n\nfunction addServiceIntegration(service, config){\n  if (config.enable){\n    ServiceConfiguration.configurations.upsert({\n      service: service\n    },{\n      $set: {\n        clientId: config.clientId,\n        secret: config.secret\n      }\n    });\n  }\n}\n\nfunction addFacebookIntegration(fb){\n  if (fb.enable){\n    ServiceConfiguration.configurations.upsert({\n      service: 'facebook'\n    },{\n      $set: {\n        appId: fb.appId,\n        secret: fb.secret\n      }\n    });\n  }\n}\n\nfunction setBasicSettings(config){\n  // Check if the settings document already exists\n  var settings = Settings.find({}).fetch();\n  if (settings.length == 0 || settings.length > 1){\n    // Remove all documents and then create the singular settings document.\n    Settings.remove({});\n    Settings.insert(config.settings);\n  }\n}\n\n// reads configuration overrides from environment variables according to a\n// template object\n//\n// name are mapped to environment variables like\n// 'foo.bar.bazQuux' -> 'FOO_BAR_BAZ_QUUX'\nfunction readConfigsFromEnv(template) {\n  function rec(template, pathElems) {\n    var config = {};\n    for (var key in template) {\n      if (!template.hasOwnProperty(key)) {\n        continue;\n      }\n      var value = template[key];\n      var upperCased = key.replace(\n        /([A-Z])/g,\n        function(c) { return '_' + c.toLowerCase(); }\n      ).toUpperCase();\n      var elems = pathElems.concat([upperCased]);\n      var envName = elems.join('_');\n      switch (typeof value) {\n        case 'object':\n          config[key] = rec(value, elems);\n          break;\n        case 'string':\n          if (typeof process.env[envName] !== 'undefined') {\n            config[key] = process.env[envName];\n          }\n          break;\n        case 'boolean':\n          var parsedBool = parseBool(process.env[envName]);\n          if (parsedBool !== null) {\n            config[key] = parsedBool;\n          }\n          break;\n        case 'number':\n          var parsedInt = parseInt(process.env[envName]);\n          if (!isNaN(parsedInt)) {\n            config[key] = parsedInt;\n          }\n          break;\n        default:\n          throw 'unsupported type: ' + (typeof value);\n      }\n    }\n    return config;\n  }\n  function parseBool(str) {\n    if (str) {\n      if (!isNaN(str)) {\n        // numeric string\n        return +str > 0;\n      } else {\n        return /^t/i.test(str) || /^y/i.test(str); // accepts things like 'True' and \"yes\"\n      }\n    } else {\n      return null;\n    }\n  }\n  return rec(template, []);\n}\n\n// updates a base object using the values in an overlay object, leaving all\n// other values in the base object intact\nfunction overlay(base, object) {\n  for (var key in object) {\n    if (!object.hasOwnProperty(key)) {\n      continue;\n    }\n    if (typeof object[key] === 'object' && typeof base[key] === 'object') {\n      overlay(base[key], object[key]);\n    } else {\n      base[key] = object[key];\n    }\n  }\n}\n"]}